using UnityEngine;

namespace Taijj.Input
{
    /// <summary>
    /// This base allows the creation of logical ScriptableObjects
    /// used as Wrappers for Unity's InputSystem InputActionMaps.
    ///
    /// Don't extend this directly. Extend <see cref="ActionMap{T}"/>
    /// to create a specific Wrapper instead!
    /// </summary>
    public abstract class ActionMap : ScriptableObject
    {
        public abstract void Wake(object actions);
        public abstract void Update();
        public abstract void CleanUp();

        public abstract bool IsEnabled { get; set; }
        public string Name { get; protected set; }
        public bool IsUi { get; protected set; }

        public static ActionMap None => null;
    }

    /// <summary>
    /// Base for custom Wrappers that Wrap around a specific InputActionMap
    /// of Unity's InputSystem.
    /// </summary>
    /// <typeparam name="T">Type that is generated by Unity, when saving an InputActions Asset.</typeparam>
    public abstract class ActionMap<T> : ActionMap
    {
        private const string UI_IDENTIFIER = "Ui";

        public override void Wake(object actions)
        {
            Base = (T)actions;
            Name = name;
            IsUi = Name.Contains(UI_IDENTIFIER);
        }

        public override void Update() {}

        protected T Base { get; private set; }
    }
}